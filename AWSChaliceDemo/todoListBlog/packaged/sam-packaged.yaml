AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  APIHandlerArn:
    Value:
      Fn::GetAtt:
      - APIHandler
      - Arn
  APIHandlerName:
    Value:
      Ref: APIHandler
  EndpointURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/
  RestAPIId:
    Value:
      Ref: RestAPI
Resources:
  APIHandler:
    Properties:
      CodeUri: s3://chalice-deployment-cfn-bucket/323b7b01d6b7d18e37a6a8bba091cc1e
      Environment:
        Variables:
          APP_TABLE_NAME: todo-app-7dd4157c-16cf-4ad6-b94f-6306c95ba903
          USERS_TABLE_NAME: users-app-d8be2df3-d831-4733-98d3-c5912460c6ca
      Handler: app.app
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - DefaultRole
        - Arn
      Runtime: python2.7
      Tags:
        aws-chalice: version=1.6.1:stage=dev:app=mytodo
      Timeout: 60
    Type: AWS::Serverless::Function
  APIHandlerInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: APIHandler
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
    Type: AWS::Lambda::Permission
  DefaultRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Sid: ''
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: DefaultRolePolicy
    Type: AWS::IAM::Role
  JwtAuth:
    Properties:
      CodeUri: s3://chalice-deployment-cfn-bucket/323b7b01d6b7d18e37a6a8bba091cc1e
      Environment:
        Variables:
          APP_TABLE_NAME: todo-app-7dd4157c-16cf-4ad6-b94f-6306c95ba903
          USERS_TABLE_NAME: users-app-d8be2df3-d831-4733-98d3-c5912460c6ca
      Handler: app.jwt_auth
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - DefaultRole
        - Arn
      Runtime: python2.7
      Tags:
        aws-chalice: version=1.6.1:stage=dev:app=mytodo
      Timeout: 60
    Type: AWS::Serverless::Function
  JwtAuthInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - JwtAuth
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
    Type: AWS::Lambda::Permission
  RestAPI:
    Properties:
      DefinitionBody:
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title: mytodo
          version: '1.0'
        paths:
          /login:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /test-ddb:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /todos:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /todos/{uid}:
            delete:
              consumes:
              - application/json
              parameters:
              - in: path
                name: uid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
            get:
              consumes:
              - application/json
              parameters:
              - in: path
                name: uid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
            put:
              consumes:
              - application/json
              parameters:
              - in: path
                name: uid
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - jwt_auth: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
        schemes:
        - https
        securityDefinitions:
          jwt_auth:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JwtAuth.Arn}/invocations
              type: token
            x-amazon-apigateway-authtype: custom
        swagger: '2.0'
        x-amazon-apigateway-binary-media-types:
        - application/octet-stream
        - application/x-tar
        - application/zip
        - audio/basic
        - audio/ogg
        - audio/mp4
        - audio/mpeg
        - audio/wav
        - audio/webm
        - image/png
        - image/jpg
        - image/jpeg
        - image/gif
        - video/ogg
        - video/mpeg
        - video/webm
      StageName: api
    Type: AWS::Serverless::Api
Transform: AWS::Serverless-2016-10-31
